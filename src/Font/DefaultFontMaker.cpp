#include "font/DefaultFontMaker.h"

void DefaultFontMaker::generateCharset()
{
    mkClear();
    mkCurr('a');
    mkCorner({2,-2,BL});
    mkCorner({0,-1,BR});
    mkCorner({2, 0,TL});
    mkCorner({0, 0,TR});
    mkLine({0, 0, 2, 0, true, true});
    mkLine({0,-2, 2,-2, false, true});
    mkLine({0,-1, 2,-1, true, false});
    mkLine({2, 0, 2,-2, true, true});
    mkLine({0, 0, 0,-1, true, true});
    mkCurr('c');
    mkCorner({0, -2, BR});
    mkCorner({0, 0, TR});
    mkLine({0, 0, 2, 0, true, false});
    mkLine({0, -2, 2, -2, true, false});
    mkLine({0, 0, 0, -2, true, true});
    mkCurr('d');
    mkCopy('c',false,false);
    mkLine({2, 0, 2, -3, false, false});
    mkCurr('b');
    mkCopy('d',true,false);
    mkCurr('e');
    mkCopy('a',true,true);
    mkCurr('f');
    mkCorner({0, -3, BR});
    mkLine({0, -2, 2, -2, false, false});
    mkLine({0, -3, 2, -3, true, false});
    mkLine({0, 0, 0, -3, false, true});
    mkCurr('g');
    mkCorner({0, -2, BR});
    mkCorner({0, 0, TR});
    mkLine({0, 0, 2, 0, true, false});
    mkLine({0, -2, 2, -2, true, false});
    mkLine({0, 0, 0, -2, true, true});
    mkLine({2, -2, 2, 1, false, true});
    mkCorner({2, 1, TL});
    mkLine({0, 1, 2, 1, false, true});
    mkCurr('h');
    mkCorner({2, -2, BL});
    mkLine({0, -2, 2, -2, false, true});
    mkLine({2, 0, 2, -2, false, true});
    mkLine({0, 0, 0, -3, false, false});
    mkCurr('i');
    mkLine({1, 0, 1, -2, false, false});
    mkLine({0, 0, 2, 0, false, false});
    mkDot({1, -3});
    mkCurr('j');
    mkLine({0, -2, 2, -2, false, false});
    mkDot({2, -3});
    mkLine({2, -2, 2, 1, false, true});
    mkCorner({2, 1, TL});
    mkLine({0, 1, 2, 1, false, true});
    mkCurr('k');
    mkLine({0, -1, 2, -2, false, false});
    mkLine({0, -1, 2, 0, false, false});
    mkLine({0, 0, 0, -3, false, false});
    mkCurr('l');
    mkLine({1, 0, 1, -3, false, false});
    mkLine({0, 0, 2, 0, false, false});
    mkCurr('m');
    mkLine({0, -2, 2, -2, false, false});
    mkLine({2, 0, 2, -2, false, false});
    mkLine({0, 0, 0, -2, false, false});
    mkLine({1, -1, 1, -2, false, false});
    mkCurr('n');
    mkCorner({2, -2, BL});
    mkCorner({0, -2, BR});
    mkLine({0, -2, 2, -2, true, true});
    mkLine({2, 0, 2, -2, false, true});
    mkLine({0, 0, 0, -2, false, false});
    mkCurr('o');
    mkCorner({0, -2, BR});
    mkCorner({2, -2, BL});
    mkCorner({0, 0, TR});
    mkCorner({2, 0, TL});
    mkLine({0, 0, 2, 0, true, true});
    mkLine({0, -2, 2, -2, true, true});
    mkLine({0, 0, 0, -2, true, true});
    mkLine({2, 0, 2, -2, true, true});
    mkCurr('p');
    mkCopy('d',true,true);
    mkCurr('q');
    mkCopy('d',false,true);
    mkCurr('r');
    mkCorner({0, -2, BR});
    mkLine({0, -2, 2, -2, true, false});
    mkLine({0, 0, 0, -2, false, false});
    mkCurr('s');
    mkCorner({2, -1, BL});
    mkCorner({0, -2, BR});
    mkCorner({2, 0, TL});
    mkCorner({0, -1, TR});
    mkLine({0, 0, 2, 0, false, true});
    mkLine({0, -2, 2, -2, true, false});
    mkLine({0, -1, 2, -1, true, true});
    mkLine({0, -1, 0, -2, true, true});
    mkLine({2, 0, 2, -1, true, true});
    mkCurr('t');
    mkCorner({0, 0, TR});
    mkLine({0, -2, 2, -2, false, false});
    mkLine({0, 0, 2, 0, true, false});
    mkLine({0, 0, 0, -3, true, false});
    mkCurr('u');
    mkCopy('n',true,true);
    mkCurr('v');
    mkLine({1, 0, 0, -2, false, false});
    mkLine({1, 0, 2, -2, false, false});
    mkCurr('w');
    mkCopy('m',false,true);
    mkCurr('x');
    mkLine({0, 0, 2, -2, false, false});
    mkLine({0, -2, 2, 0, false, false});
    mkCurr('y');
    mkLine({0, 1, 2, -2, false, false});
    mkLine({1, 0, 0, -2, false, false});
    mkCurr('z');
    mkLine({0, -2, 2, -2, false, false});
    mkLine({0, 0, 2, 0, false, false});
    mkLine({0, 0, 2, -2, false, false});
    mkCurr('0');
    mkDigits({0,2,3,4,5,6});
    mkLine({0, 0, 2, -2, false, false});
    mkCurr('1');
    mkLine({1,0,1,-2});
    mkCurr('2');
    mkDigits({0,1,2,3,6});
    mkCurr('3');
    mkDigits({0,1,2,5,6});
    mkCurr('4');
    mkDigits({1,4,5,6});
    mkCurr('5');
    mkDigits({0,1,2,4,5});
    mkCurr('6');
    mkDigits({0,1,2,3,4,5});
    mkCurr('7');
    mkDigits({2,5,6});
    mkCurr('8');
    mkDigits({0,1,2,3,4,5,6});
    mkCurr('9');
    mkDigits({0,1,2,4,5,6});
    mkCurr('\'');
    mkLine({1, -3, 1, -2, false, false});
    mkCurr('+');
    mkLine({1, -2, 1, 0, true, true});
    mkLine({0, -1, 2, -1, false, false});
    mkCurr('-');
    mkLine({0, -1, 2, -1, false, false});
    mkCurr('*');
    mkLine({0, 0, 1, -1, true, false});
    mkLine({0, -1, 1, -1, false, false});
    mkLine({2, 0, 1, -1, true, false});
    mkLine({2, -1, 1, -1, false, false});
    mkLine({1, -2, 1, -1, true, false});
    mkCurr('=');
    mkLine({0, -1.5, 2, -1.5, false, false});
    mkLine({0, -0.5, 2, -0.5, false, false});
    mkCurr(':');
    mkDot({1, -0.5});
    mkDot({1, -1.5});
    mkCurr('.');
    mkDot({1, 0});
    mkCurr(',');
    mkLine({1, 1, 1, 0, false, false});
    mkCurr(';');
    mkLine({1, 1, 1, 0, false, false});
    mkDot({1, -1});
    mkCurr('/');
    mkLine({0, 0, 2, -3, false, false});
    mkCurr('\\');
    mkCopy('/',true,false);
    mkCurr('!');
    mkLine({1, -3, 1, 0, false, true});
    mkDot({1, 0});
    mkCurr('?');
    mkCorner({0, -3, BR});
    mkCorner({2, -3, BL});
    mkCorner({2, -1, TL});
    mkLine({1, -1, 2, -1, false, true});
    mkLine({2, -3, 2, -1, true, true});
    mkLine({2, -3, 0, -3, true, true});
    mkLine({0, -3, 0, -2, true, false});
    mkLine({1, -1, 1, 0, false, true});
    mkDot({1, 0});
    mkCurr('<');
    mkLine({0, -1, 2, -2, false, false});
    mkLine({0, -1, 2, 0, false, false});
    mkCurr('>');
    mkCopy('<',true,false);
    mkCurr('[');
    mkLine({0, -3, 2, -3, false, false});
    mkLine({0, 0, 2, 0, false, false});
    mkLine({0, 0, 0, -3, false, false});
    mkCurr(']');
    mkCopy('[',true,false);
    mkCurr('(');
    mkCorner({0, -3, BR});
    mkCorner({0, 0, TR});
    mkLine({0, 0, 0, -3, true, true});
    mkCurr(')');
    mkCopy('(',true,false);
    mkCurr('{');
    mkCorner({0, -3, BR});
    mkCorner({0, 0, TR});
    mkCorner({0, -2, TL});
    mkCorner({0, -2, BL});
    mkLine({0, -2, 0, -3, true, true});
    mkLine({0, 0, 0, -2, true, true});
    mkCurr('}');
    mkCopy('{',true,false);
    mkCurr('_');
    mkLine({0, 0, 2, 0, false, false});
    mkCurr('"');
    mkLine({0, -3, 0, -2, false, false});
    mkLine({2, -3, 2, -2, false, false});
    mkCurr('&');
    mkCorner({0, -2, BR});
    mkCorner({2, -3, BL});
    mkCorner({0, 0, TR});
    mkCorner({2, -2, TL});
    mkCorner({0, -3, BR});
    // mkCorner({2, 0, TL});
    mkLine({0, -3, 2, -3, true, true});
    // mkLine({2, 0, 2, -1, true, false});
    mkLine({0, 0, 2, 0, true, true});
    mkLine({1, -3, 2, -3, false, true});
    mkLine({0, -2, 2, -2, true, true});
    mkLine({2, -2, 2, -3, true, true});
    mkLine({0, 0, 0, -2, true, true});
    mkLine({0, -3, 2, 0, true, false});
    mkCurr('A');
    mkLine({0, 0, 0, -3, false, false});
    mkLine({2, 0, 2, -3, false, false});
    mkLine({0, -3, 2, -3, false, false});
    mkLine({0, -2, 2, -2, false, false});
    mkCurr('B');
    mkCorner({2, -2, BL});
    mkCorner({2, 0, TL});
    mkCorner({2, -3, BL});
    mkCorner({2, -2, TL});
    mkLine({0, 0, 2, 0, false, true});
    mkLine({2, 0, 2, -2, true, true});
    mkLine({0, -2, 2, -2, false, true});
    mkLine({0, -3, 2, -3, false, true});
    mkLine({2, -2, 2, -3, true, true});
    mkLine({0, 0, 0, -3, false, false});
    mkCurr('C');
    mkCorner({0, -3, BR});
    mkCorner({0, 0, TR});
    mkLine({0, 0, 2, 0, true, false});
    mkLine({0, 0, 0, -3, true, true});
    mkLine({0, -3, 2, -3, true, false});
    mkCurr('D');
    mkCorner({2, -3, BL});
    mkCorner({2, 0, TL});
    mkLine({0, 0, 2, 0, false, true});
    mkLine({2, 0, 2, -3, true, true});
    mkLine({0, -3, 2, -3, false, true});
    mkLine({0, 0, 0, -3, false, false});
    mkCurr('F');
    mkLine({0, -2, 2, -2, false, false});
    mkLine({0, -3, 2, -3, false, false});
    mkLine({0, 0, 0, -3, false, false});
    mkCurr('E');
    mkCopy('F',false,false);
    mkLine({0, 0, 2, 0, false, false});
    mkCurr('G');
    mkLine({0, 0, 0, -3, false, false});
    mkLine({2, -2, 2, 0, false, false});
    mkLine({0, -3, 2, -3, false, false});
    mkLine({0, 0, 2, 0, false, false});
    mkLine({1, -2, 2, -2, false, false});
    mkCurr('H');
    mkLine({0, 0, 0, -3, false, false});
    mkLine({2, 0, 2, -3, false, false});
    mkLine({0, -2, 2, -2, false, false});
    mkCurr('I');
    mkLine({1, 0, 1, -3, false, false});
    mkLine({0, 0, 2, 0, false, false});
    mkLine({0, -3, 2, -3, false, false});
    mkCurr('J');
    mkLine({2, 0, 2, -3, true, false});
    mkLine({1, -3, 2, -3, false, false});
    mkLine({0, 0, 2, 0, false, true});
    mkCorner({2, 0, TL});
    mkCurr('K');
    mkLine({0, 0, 0, -3, false, false});
    mkLine({0, -2, 2, -3, false, false});
    mkLine({0, -2, 2, 0, false, false});
    mkCurr('L');
    mkLine({0, 0, 0, -3, false, false});
    mkLine({0, 0, 2, 0, false, false});
    mkCurr('M');
    mkLine({0, 0, 0, -3, false, false});
    mkLine({2, 0, 2, -3, false, false});
    mkLine({0, -3, 1, -2, false, false});
    mkLine({2, -3, 1, -2, false, false});
    mkCurr('N');
    mkLine({0, 0, 0, -3, false, false});
    mkLine({2, 0, 2, -3, false, false});
    mkLine({0, -3, 2, 0, false, false});
    mkCurr('O');
    mkCorner({0, -3, BR});
    mkCorner({2, -3, BL});
    mkCorner({0, 0, TR});
    mkCorner({2, 0, TL});
    mkLine({0, 0, 2, 0, true, true});
    mkLine({0, -3, 2, -3, true, true});
    mkLine({0, 0, 0, -3, true, true});
    mkLine({2, 0, 2, -3, true, true});
    mkCurr('P');
    mkCorner({2, -3, BL});
    mkCorner({2, -2, TL});
    mkLine({0, -2, 2, -2, false, true});
    mkLine({0, -3, 2, -3, false, true});
    mkLine({2, -2, 2, -3, true, true});
    mkLine({0, 0, 0, -3, false, false});
    mkCurr('Q');
    mkCopy('O',false,false);
    mkLine({1, -1, 2, 0, false, false});
    mkCurr('R');
    mkCopy('P',false,false);
    mkLine({0, -2, 2, 0, false, false});
    mkCurr('S');
    mkCorner({2, -2, BL});
    mkCorner({0, -3, BR});
    mkCorner({2, 0, TL});
    mkCorner({0, -2, TR});
    mkLine({0, 0, 2, 0, false, true});
    mkLine({0, -3, 2, -3, true, false});
    mkLine({0, -2, 2, -2, true, true});
    mkLine({0, -2, 0, -2, true, true});
    mkLine({2, 0, 2, -2, true, true});
    mkCurr('T');
    mkLine({1, 0, 1, -3, false, false});
    mkLine({0, -3, 2, -3, false, false});
    mkCurr('U');
    mkCorner({0, 0, TR});
    mkCorner({2, 0, TL});
    mkLine({0, 0, 2, 0, true, true});
    mkLine({0, 0, 0, -3, true, false});
    mkLine({2, 0, 2, -3, true, false});
    mkCurr('V');
    mkLine({1, 0, 0, -3, false, false});
    mkLine({1, 0, 2, -3, false, false});
    mkCurr('W');
    mkLine({0, 0, 0, -3, false, false});
    mkLine({2, 0, 2, -3, false, false});
    mkLine({0, 0, 1, -2, false, false});
    mkLine({2, 0, 1, -2, false, false});
    mkCurr('X');
    mkLine({0, -3, 2, 0, false, false});
    mkLine({0, 0, 2, -3, false, false});
    mkCurr('Y');
    mkLine({0, -3, 1, -1, false, false});
    mkLine({2, -3, 1, -1, false, false});
    mkLine({1, 0, 1, -1, false, false});
    mkCurr('Z');
    mkLine({0, -3, 2, -3, false, false});
    mkLine({0, 0, 2, 0, false, false});
    mkLine({0, 0, 2, -3, false, false});
}
